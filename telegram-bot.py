import requests
import time
import threading
import telebot

API_TOKEN = '7685325319:AAEVOGXmVbxux7XQHPmObc12TxMjfZ0ZYMk'
bot = telebot.TeleBot(API_TOKEN)

def get_all_symbols():
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = requests.get(url, timeout=5).json()
        symbols = []
        for s in data['symbols']:
            if s['quoteAsset'] == 'USDT' and s['status'] == 'TRADING':
                symbols.append(s['symbol'])
        return symbols
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []

SYMBOLS = get_all_symbols()
print(f"–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(SYMBOLS)}")

densities_cache = {}
lock = threading.Lock()  # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
THRESHOLD_MULT = 1.5
STABLE_SECONDS = 600  # –≤—Ä–µ–º—è "–≤—ã–¥–µ—Ä–∂–∫–∏" –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞

def get_order_book(symbol='BANUSDT', limit=1000):
    url = 'https://fapi.binance.com/fapi/v1/depth'
    try:
        resp = requests.get(url, params={'symbol': symbol, 'limit': limit}, timeout=5)
        return resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
        return None

def get_mark_price(symbol='BANUSDT'):
    url = 'https://fapi.binance.com/fapi/v1/premiumIndex'
    try:
        resp = requests.get(url, params={'symbol': symbol}, timeout=5)
        return float(resp.json()['markPrice'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None

def get_klines(symbol='BANUSDT', limit=5):
    url = 'https://fapi.binance.com/fapi/v1/klines'
    params = {'symbol': symbol, 'interval': '5m', 'limit': limit}
    try:
        resp = requests.get(url, params=params, timeout=5)
        return resp.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
        return []

def get_avg_dollar_volume(symbol='BANUSDT'):
    klines = get_klines(symbol)
    if not klines:
        return None
    volumes = [float(c[4]) * float(c[5]) for c in klines]  # close_price * volume
    return sum(volumes) / len(volumes)

def find_strongest_density(snapshot, avg_volume, mark_price, threshold=1.5):
    densities = []

    for side in ['bids', 'asks']:
        for price_str, qty_str in snapshot.get(side, [])[:500]:
            price = float(price_str)
            qty = float(qty_str)
            total_usd = price * qty

            if total_usd >= avg_volume * threshold:
                densities.append({
                    'side': side,
                    'price': price_str,
                    'qty': qty,
                    'usd': total_usd
                })

    if densities:
        return max(densities, key=lambda d: d['usd'])
    return None

def monitor_densities():
    while True:
        now = time.time()
        for symbol in SYMBOLS:
            avg_volume = get_avg_dollar_volume(symbol)
            mark_price = get_mark_price(symbol)
            if avg_volume is None or mark_price is None:
                continue

            snapshot = get_order_book(symbol)
            if not snapshot:
                continue

            density = find_strongest_density(snapshot, avg_volume, mark_price, threshold=THRESHOLD_MULT)

            with lock:
                if symbol not in densities_cache:
                    densities_cache[symbol] = {}

                if density:
                    old = densities_cache[symbol].get('density')
                    if old and old['price'] == density['price'] and old['side'] == density['side']:
                        density['start_time'] = old['start_time']
                    else:
                        density['start_time'] = now

                    densities_cache[symbol]['density'] = density
                else:
                    densities_cache[symbol]['density'] = None

        time.sleep(3)

def format_density_report():
    report_lines = []
    now = time.time()
    with lock:
        items = list(densities_cache.items())

    for symbol, data in items:
        density = data.get('density')
        if density:
            lifetime_sec = now - density['start_time']
            if lifetime_sec >= STABLE_SECONDS:
                mark_price = get_mark_price(symbol)
                if mark_price is None:
                    continue

                distance = abs(float(density['price']) - mark_price) / mark_price * 100
                if distance > 7:  # –§–∏–ª—å—Ç—Ä: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –±–æ–ª—å—à–µ 7%
                    continue

                order_type = '–ü–æ–∫—É–ø–∫–∞' if density['side'] == 'bids' else '–ü—Ä–æ–¥–∞–∂–∞'

                line = (
                    f"<b>{symbol}</b>\n\n"
                    f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –Ω–∞ —Ü–µ–Ω–µ: <b>{density['price']}$</b>\n"
                    f"–°—É–º–º–∞: <b>{density['usd'] / 1000:.1f}K$</b>\n"
                    f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{distance:.2f}%</b>\n"
                    f"–í—Ä–µ–º—è –∂–∏–∑–Ω–∏: <b>{lifetime_sec / 60:.1f} –º–∏–Ω</b>\n"
                    f"–¢–∏–ø –æ—Ä–¥–µ—Ä–∞: <b>{order_type}</b>\n"
                )
                report_lines.append(line)

    if not report_lines:
        return "‚ùå <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –ø–ª–æ—Ç–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç.</b>"

    return "<b>üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏:</b>\n\n" + "\n".join(report_lines)



@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–Ω–∏—Ç–æ—Ä—é –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /densities —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ.")


MAX_MESSAGE_LENGTH = 4000  # —Å –∑–∞–ø–∞—Å–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç

def send_long_message(bot, chat_id, text, parse_mode=None):
    if len(text) <= MAX_MESSAGE_LENGTH:
        bot.send_message(chat_id, text, parse_mode=parse_mode)
    else:
        # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        lines = text.split('\n')
        chunk = ""
        for line in lines:
            if len(chunk) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                bot.send_message(chat_id, chunk, parse_mode=parse_mode)
                chunk = ""
            chunk += line + "\n"
        if chunk:
            bot.send_message(chat_id, chunk, parse_mode=parse_mode)

@bot.message_handler(commands=['densities'])
def handle_densities(message):
    report = format_density_report()
    send_long_message(bot, message.chat.id, report, parse_mode='HTML')



if __name__ == '__main__':
    monitor_thread = threading.Thread(target=monitor_densities, daemon=True)
    monitor_thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
