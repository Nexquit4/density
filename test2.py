import requests
import time

def get_order_book(symbol='BANUSDT', limit=100):
    url = 'https://fapi.binance.com/fapi/v1/depth'
    params = {'symbol': symbol, 'limit': limit}
    return requests.get(url, params=params).json()

def get_mark_price(symbol='BANUSDT'):
    url = 'https://fapi.binance.com/fapi/v1/premiumIndex'
    return float(requests.get(url, params={'symbol': symbol}).json()['markPrice'])

def get_klines(symbol='BANUSDT', limit=5):
    url = 'https://fapi.binance.com/fapi/v1/klines'
    params = {'symbol': symbol, 'interval': '5m', 'limit': limit}
    return requests.get(url, params=params).json()

def get_avg_dollar_volume(symbol='BANUSDT'):
    klines = get_klines(symbol)
    volumes = [float(c[4]) * float(c[5]) for c in klines]  # close_price * volume
    return sum(volumes) / len(volumes)

def find_strongest_density(snapshot, avg_volume, mark_price, threshold=1.5):
    densities = []

    for side in ['bids', 'asks']:
        for price_str, qty_str in snapshot[side][:50]:
            price = float(price_str)
            qty = float(qty_str)
            total_usd = price * qty

            if total_usd >= avg_volume * threshold:
                densities.append({
                    'side': side,
                    'price': price_str,
                    'qty': qty_str,
                    'usd': total_usd
                })

    return max(densities, key=lambda d: d['usd'], default=None)

def track_density(symbol='BANUSDT', watch_seconds=10):
    avg_volume = get_avg_dollar_volume(symbol)
    mark_price = get_mark_price(symbol)
    print(f"\nüìä –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –æ–±—ä—ë–º –∑–∞ 5–º: ${avg_volume:.2f}")

    snapshot = get_order_book(symbol)
    density = find_strongest_density(snapshot, avg_volume, mark_price)

    if not density:
        print("‚ùå –ù–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–µ–π, –ø—Ä–µ–≤—ã—à–∞—é—â–∏—Ö —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º.")
        return

    side = density['side']
    price_str = density['price']
    qty_str = density['qty']
    usd_total = density['usd']

    print(f"\nüéØ –ù–∞–π–¥–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å:")
    print(f"{side.upper()} | –¶–µ–Ω–∞: {price_str} | –û–±—ä—ë–º: {qty_str} | –°—É–º–º–∞: ${usd_total:,.2f}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    survived = True
    for i in range(watch_seconds):
        time.sleep(1)
        snapshot = get_order_book(symbol)
        found = any(
            p == price_str and float(q) >= float(qty_str) * 0.9
            for p, q in snapshot[side]
        )

        print(f"[{i + 1}s] –£—Ä–æ–≤–µ–Ω—å {'–Ω–∞–π–¥–µ–Ω' if found else '–∏—Å—á–µ–∑'}")

        if not found:
            survived = False
            break

    if survived:
        print(f"\n‚úÖ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–ª–∞—Å—å {watch_seconds} —Å–µ–∫—É–Ω–¥.")
        print("üü¢ –í–µ—Ä–æ—è—Ç–Ω–æ —Ä–µ–∞–ª—å–Ω–∞—è.")
    else:
        print(f"\n‚ö†Ô∏è –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏—Å—á–µ–∑–ª–∞ –∑–∞ {i + 1} —Å–µ–∫—É–Ω–¥.")
        print("üî¥ –í–æ–∑–º–æ–∂–Ω–æ spoof (—Ñ–µ–π–∫–æ–≤–∞—è –∑–∞—è–≤–∫–∞).")

# –ó–∞–ø—É—Å–∫
track_density()
